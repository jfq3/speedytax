// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// copy_SM
StringMatrix copy_SM(StringMatrix x);
RcppExport SEXP _speedytax_copy_SM(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(copy_SM(x));
    return rcpp_result_gen;
END_RCPP
}
// fix_domain_C
StringMatrix fix_domain_C(StringMatrix taxa_matrix, NumericMatrix confidence_matrix, double confidence);
RcppExport SEXP _speedytax_fix_domain_C(SEXP taxa_matrixSEXP, SEXP confidence_matrixSEXP, SEXP confidenceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringMatrix >::type taxa_matrix(taxa_matrixSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type confidence_matrix(confidence_matrixSEXP);
    Rcpp::traits::input_parameter< double >::type confidence(confidenceSEXP);
    rcpp_result_gen = Rcpp::wrap(fix_domain_C(taxa_matrix, confidence_matrix, confidence));
    return rcpp_result_gen;
END_RCPP
}
// fix_qiime2_domain_C
StringMatrix fix_qiime2_domain_C(StringMatrix sorted_data);
RcppExport SEXP _speedytax_fix_qiime2_domain_C(SEXP sorted_dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringMatrix >::type sorted_data(sorted_dataSEXP);
    rcpp_result_gen = Rcpp::wrap(fix_qiime2_domain_C(sorted_data));
    return rcpp_result_gen;
END_RCPP
}
// fix_qiime2_rest_C
StringMatrix fix_qiime2_rest_C(StringMatrix sorted_data);
RcppExport SEXP _speedytax_fix_qiime2_rest_C(SEXP sorted_dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringMatrix >::type sorted_data(sorted_dataSEXP);
    rcpp_result_gen = Rcpp::wrap(fix_qiime2_rest_C(sorted_data));
    return rcpp_result_gen;
END_RCPP
}
// fix_rdp_rest_C
StringMatrix fix_rdp_rest_C(StringMatrix taxa_matrix, NumericMatrix confidence_matrix, double confidence);
RcppExport SEXP _speedytax_fix_rdp_rest_C(SEXP taxa_matrixSEXP, SEXP confidence_matrixSEXP, SEXP confidenceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringMatrix >::type taxa_matrix(taxa_matrixSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type confidence_matrix(confidence_matrixSEXP);
    Rcpp::traits::input_parameter< double >::type confidence(confidenceSEXP);
    rcpp_result_gen = Rcpp::wrap(fix_rdp_rest_C(taxa_matrix, confidence_matrix, confidence));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_speedytax_copy_SM", (DL_FUNC) &_speedytax_copy_SM, 1},
    {"_speedytax_fix_domain_C", (DL_FUNC) &_speedytax_fix_domain_C, 3},
    {"_speedytax_fix_qiime2_domain_C", (DL_FUNC) &_speedytax_fix_qiime2_domain_C, 1},
    {"_speedytax_fix_qiime2_rest_C", (DL_FUNC) &_speedytax_fix_qiime2_rest_C, 1},
    {"_speedytax_fix_rdp_rest_C", (DL_FUNC) &_speedytax_fix_rdp_rest_C, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_speedytax(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
